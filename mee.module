<?php

// Include the file with the field UI functions.
require_once dirname(__FILE__) . '/mee.field.inc';

/**
 * Implements hook_menu
 *
 * @author JaceRider
 */
function mee_menu(){
  $items['mee/iframe'] = array(
    'page callback' => 'mee_iframe_page',
    'delivery callback' => 'mee_deliver_html_page',
    'access arguments' => array('access content'),
    'file' => 'mee.iframe.inc',
    //'delivery callback' => 'core_ajax_deliver',
    'type' => MENU_CALLBACK
  );
  $items['admin/config/content/mee'] = array(
    'title' => 'Mee Editor',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mee_settings'),
    'access arguments' => array('administer mee'),
    'file' => 'mee.admin.inc',
    'description' => t('Configure the mee editor.')
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function mee_permission() {
  return array(
    'administer mee' => array(
      'title' => t('Administer Mee Editor'),
      'description' => t('Perform administration tasks for the mee editor.'),
    ),
  );
}

/**
 * Implements hook_theme().
 *
 * @author JaceRider
 */
function mee_theme() {
  return array(
    'mee_iframe' => array(
      'variables' => array('iframe' => array()),
      'template' => 'theme/mee.iframe',
    ),
    'mee_config_form_toolbar' => array(
      'render element' => 'element',
      'file' => 'mee.field.inc',
    ),
  );
}

function mee_field_widget_form_alter(&$element, &$form_state, $context){
  $field = $context['field'];
  if(in_array($field['type'], mee_allowed_field_types())){

  }
}

/**
 * Implements hook_element_info_alter().
 */
function mee_element_info_alter(&$types) {
  foreach(mee_allowed_elements() as $element){
    if(isset($types[$element])){
      $types[$element]['#process'][] = 'mee_process_widget';
    }
  }
  if(isset($types['text_format'])){
      $types['text_format']['#process'][] = 'mee_process_text_format';
  }
}

/**
 * Process callback.
 */
function mee_process_text_format(&$element) {
  if (!isset($element['#entity_type'])) {
    return $element;
  }

  $field = field_info_field($element['#field_name']);
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);

  // Mee is not enabled on this field
  if(empty($instance['settings']['mee'])) return $element;

  $config = $instance['settings']['mee'];

  // Mee is not enabled on this field
  if(empty($config['enable']) || empty($config['settings']['text_format'])) return $element;

  $text_format = $config['settings']['text_format'];

  $element['format']['#type'] = 'container';
  $element['format']['guidelines']['#access'] = FALSE;
  $element['format']['help']['#access'] = FALSE;
  $element['format']['format'] = array(
    '#type' => 'hidden',
    '#value' => $text_format,
  );

  return $element;
}

/**
 * Process callback.
 */
function mee_process_widget(&$element) {
  if (!isset($element['#entity_type'])) {
    return $element;
  }

  if(empty($element['#entity_type'])){
    $id = 'mee-config';
  }else{
    $id = str_replace('_','-','mee-'.$element['#entity_type'].'-'.$element['#bundle'].'-'.$element['#field_name']);
  }

  $id .= '-'.rand(100000,999999);

  $field = field_info_field($element['#field_name']);
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);

  // Mee is not enabled on this field
  if(empty($instance['settings']['mee'])) return $element;

  $config = $instance['settings']['mee'];

  // Mee is not enabled on this field
  if(empty($config['enable'])) return $element;

  $settings = array(
    'selector' => '#'.$id,
    'autogrow' => $config['settings']['autogrow'],
    'labels_show' => $config['settings']['labels_show'],
    'view' => $config['settings']['view']
  );

  $groups_found = array();
  // Buttons
  if(!empty($config['settings']['toolbar']['buttons'])){
    uasort($config['settings']['toolbar']['buttons'], 'drupal_sort_weight');
    $buttons = mee_buttons();
    foreach($config['settings']['toolbar']['buttons'] as $name => $c){
      if(empty($c['status']) || empty($buttons[$name])) continue;
      $p = $buttons[$name];
      $settings['buttons'][$name] = array(
        'label' => '<i class="icon-' . $p['icon'] . '"></i>',
        'tip' => $p['tip'],
        'key' => $p['shortcut'],
        'group' => $c['group'],
      );
      // The button command defaults to the unique $button name. This can be
      // changed.
      if(!empty($p['callback'])) $settings['buttons'][$name]['command'] = $p['callback'];
      // Additional information can be attached to button settings via the
      // "data" key. Expected to be an array.
      if(!empty($p['data'])) $settings['buttons'][$name]['data'] = $p['data'];
      $groups_found[$c['group']] = 1;
    }
  }
  // Groups
  if(!empty($config['settings']['toolbar']['groups'])){
    foreach($config['settings']['toolbar']['groups'] as $name => $label){
      if(empty($groups_found[$name])) continue;
      $settings['groups'][$name] = array(
        'label' => t($label),
        'weight' => 0,
        'pos' => $name == 'right' ? 'right' : 'left',
      );
    }
  }
  mee_add_js($settings);

  $element['#resizable'] = FALSE;
  $element['#id'] = $id;
  $element['#attributes']['class'][] = 'mee-textarea';
  $element['#field_prefix'] = '<div id="wmd-button-bar"></div>';
  //$element[$key]['#value'] = "This is a **test** of *awesomness*\n\n - List item\n\n[enter link description here][1]\n\nThis is just a long bit of text so I can run tests\n\n##A really cool test\n\n###this is sooo stinking cool!\n\n [1]: http://www.google.com";
  //$element['#value'] = "[Google][1]\n\n[1]: http://google.com";

  drupal_alter('mee_editor_element', $element);

  return $element;
}

function mee_preprocess_html(&$vars) {
  //drupal_add_css(drupal_get_path('module', 'mee').'/css/application.css');
}

/**
 * Add all JavaScript needed for the editor to work.
 */
function mee_add_js($settings = NULL) {
  drupal_add_library('mee', 'mee', FALSE);
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_library('system', 'jquery.form');
  foreach(mee_buttons() as $name => $p){
    if(!empty($p['script'])){
      drupal_add_js(drupal_get_path('module', $p['module']).'/'.$p['script']);
    }
  }
  if($settings && is_array($settings)){
    drupal_add_js(array('mee' => array($settings['selector'] => $settings)), 'setting');
  }
}

function mee_icons(){

  $file = file_get_contents(dirname(__FILE__) . '/fonts/config.json');
  $json = json_decode($file, true);

  $icons = array();
  foreach($json['glyphs'] as $glyph){
    $icons[] = $glyph['css'];
  }

  drupal_alter('mee_icons', $icons);
  return $icons;
}

function mee_buttons(){
  $buttons = mee_get_plugin('buttons');
  drupal_alter('mee_buttons', $buttons);
  return $buttons;
}

function mee_button_groups(){
  $groups = array(
    'font' => t('Font Style'),
    'list' => t('List'),
    'insert' => t('Insert Items'),
    'other' => t('Other'),
    'right' => t('Right'),
  );
  drupal_alter('mee_button_groups', $groups);
  return $groups;
}

/**
 * Implements hook_library().
 */
function mee_library() {
  $path = drupal_get_path('module', 'mee');
  $libraries['mee'] = array(
    'title' => 'Mee',
    'version' => '0.1',
    'js' => array(
      $path.'/js/mee.marked.js' => array(),
      $path.'/js/mee.editor.js' => array(),
      $path.'/js/mee.js' => array(),
    ),
    'css' => array(
      // $path . '/css/mee.scss' => array(
      //   'type' => 'file',
      //   'media' => 'screen',
      // ),
      $path . '/css/application.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    )
  );

  return $libraries;
}

/**
* Implements hook_ctools_plugin_directory().
*/
function mee_ctools_plugin_directory($module, $plugin) {
  if ($module == 'mee') {
    return 'plugins/' . $plugin;
  }
}

/**
* Implements hook_ctools_plugin_type().
*
* Has plenty options. See ctools/help/plugins-creating.html
*/
function mee_ctools_plugin_type() {
  $plugins = array(
    'buttons' => array(
      'classes' => array('class'),
    ),
  );
  drupal_alter('mee_plugin_types', $plugins);
  return $plugins;
}

/**
 * Fetch metadata for all mee plugins.
 *
 * @return
 *   An array of arrays with information about all available mee plugins.
 */
function mee_get_plugins() {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('mee');
  // If you alter the plugins handler, be sure the new handler is registerd or
  // you include it in some other way.
  drupal_alter('mee_plugins', $plugins);
  return $plugins;
}

/**
 * Fetch metadata for one mee plugin by the given name.
 */
function mee_get_plugin($plugin_name) {
  ctools_include('plugins');
  $plugin = ctools_get_plugins('mee', $plugin_name);
  // If you alter the plugin handler, be sure the new handler is registerd or
  // you include it in some other way.
  drupal_alter('mee_plugin', $plugin);
  return $plugin;
}

/**
* Get the links handlers.
*
* @param $handler
* The links handler name.
*/
function _mee_get_handler($type, $name) {
  $object_cache = drupal_static(__FUNCTION__);
  if (!isset($object_cache[$name])) {
    ctools_include('plugins');
    $class = ctools_plugin_load_class('mee', $type, $name, 'class');
    $class = class_exists($class) ? $class : 'mee_'.ucfirst($type).'Handler_Broken';
    $all_args = func_get_args();
    $args = array_slice($all_args, 2);
    $object_cache[$name] = new $class($name, $args);
  }

  return $object_cache[$name];
}
